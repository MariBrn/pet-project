# -*- coding: utf-8 -*-
"""Копия блокнота "Отладка "Пет-проджект""""""

"""Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RFaWpmHIJK2hKR0y1AaosCo7Kyde6BA4"""

from bs4 import BeautifulSoup
from requests import get  #библиотека, с помощью которой можно делать запросы в интернет
import pandas as pd
import time
import re

headers = {
    'User-Agent': 
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36 OPR/81.0.4196.60' 
}

stations = []
times_to_metro  = []
prices = []
locations = []
conditions = []
descriptions = []
titles = []
dates = []

n_pages = 0

for page in range(0,3):
    n_pages += 1
    sapo_url = 'https://realty.yandex.ru/sankt-peterburg_i_leningradskaya_oblast/snyat/kvartira/odnokomnatnaya/?utm_source=yandex_direct&utm_medium=direct_rent&utm_content=10095803942_34972458049&utm_campaign=460_58096338_poisk_tgo_spb_rent&yclid=7310639318324274074&priceMax=30000&sort=DATE_DESC'+'&pn='+str(page)
    r = get(sapo_url, headers=headers)
    html_soup = BeautifulSoup(r.text, 'html.parser')
    house_blocks = html_soup.find_all('li', class_= "OffersSerpItem OffersSerpItem_view_desktop OffersSerpItem_format_full OffersSerp__list-item OffersSerp__list-item_type_offer")
    if house_blocks != []:
        for block in house_blocks:
            date = block.find_all('div', class_= "OffersSerpItem__meta")
            date = date[0].text
            if re.findall('вчера', date):
              pass
            else:
                    
              # Площадь                                          
              title = block.find_all('h3')[0].text
              title = title.replace(', 1-комнатная квартира','')
              title = title.replace('\xa0','')
              titles.append(title)

              # Price 
              price = block.find_all('div')[16].text
              price = price.replace('\xa0',' ')
              prices.append(price)

              # Метро
              metro = block.find_all('span')[11].text
              stations.append(metro)

              # Время до метро пешком 
              timetro = block.find_all('span')[13].text
              times_to_metro.append(timetro)

              # Адрес
              adress = block.find_all('div', class_= "OffersSerpItem__address")
              adress = adress[0].text
              adress = re.sub('Санкт-Петербург', "Спб", adress)
              locations.append(adress)

              # Комиссия, залог
              condition = block.find_all('div', class_= "ItemPaymentsInfo OffersSerpItem__paymentsInfo")
              condition = condition[0].text
              if condition != '':
                  condition = condition.replace('\xa0',' ')
              else:
                  condition = 'Уточнить'
              conditions.append(condition)

              # Когла выложили объявление
              date = block.find_all('div', class_= "OffersSerpItem__meta")
              date = date[0].text
              date = date.replace('\xa0',' ')
              dates.append(date)

              # Описание 
              block.find_all('p')
              description = block.find_all('p')[0].text
              description = re.sub('Арт. \d{8}|3-\d{5}|Арт. \d{6}', "", description)
              descriptions.append(description)
               
               
    else:
        break
    time.sleep(2)
    
print('You scraped {} pages containing {} properties.'.format(n_pages, len(titles)))

cols = ['Title', 'Station','Price', 'Time_to_metro', 'Location', 'Date', 'Conditions','Description']

house = pd.DataFrame({'Title': titles,
                           'Station': stations,
                           'Price': prices,
                           'Time_to_metro': times_to_metro,
                           'Location': locations,
                           'Date': dates,
                           'Conditions': conditions,
                           'Description': descriptions})[cols]
  

house = house.drop_duplicates() 
#house = house.style.set_table_styles([dict(selector='th', props=[('text-align', 'center')])])
#house.set_properties(**{'text-align': 'center'}).hide_index()
print(house)               

# lisboa = pd.read_excel('lisboa_raw.xls')

!pip install pretty_html_table

from pretty_html_table import build_table
table = build_table(house, 'blue_light')

with open('house.html', 'w') as f:
    f.write(table)

import smtplib                                  # работа с SMTP сервером
from email.mime.multipart import MIMEMultipart  # создаём сообщение
from email.mime.text import MIMEText

# подключаемся к SMTP серверу
fromaddr = "bryanskayasmr99@gmail.com"
toaddr = "mary_br99@mail.ru"
mypass = "tamphoto180"

# создаём письмо
msg = MIMEMultipart('mixed')
msg['Subject'] = 'Письмо с текстом и таблицей'
msg['From'] = 'bryanskayasmr99@gmail.com'
msg['To'] = 'mary_br99@mail.ru'
       
#добавляем в письмо текст и таблицу
main_table = MIMEText('<h3>Ниже наша тестовая таблица</h3>', 'html')
html_table = MIMEText(table, 'html')
 
msg.attach(main_table)
msg.attach(html_table)
 
# отправляем письмо
server = smtplib.SMTP('smtp.gmail.com', 587)        # Создаем объект SMTP
server.starttls()                                   # Начинаем шифрованный обмен по TLS
server.login(fromaddr, mypass)                   # Получаем доступ
server.send_message(msg)                            # Отправляем сообщение
server.quit()

house = house.style.set_table_styles([dict(selector='th', props=[('text-align', 'center')])])
house.set_properties(**{'text-align': 'center'}).hide_index()

house.to_excel('house_raw.xls')
from google.colab import files
house.to_excel('house_raw.xls') 
files.download('house_raw.xls')